/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.encora.taskmanagement.api;

import com.encora.taskmanagement.model.CreateTaskRequest;
import com.encora.taskmanagement.model.CreateTaskResponse;
import com.encora.taskmanagement.model.SearchTasksRequest;
import com.encora.taskmanagement.model.SearchTasksResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Controller
@Tag(name = "Tasks", description = "the Tasks API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tasks : Creates a new task.
     *
     * @param createTaskRequest  (required)
     * @return Successfully created a new task. (status code 201)
     *         or Bad Request - Invalid input data (status code 400)
     */
    @Operation(
        operationId = "createTask",
        summary = "Creates a new task.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created a new task.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTaskResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid input data")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateTaskResponse> createTask(
        @Parameter(name = "CreateTaskRequest", description = "", required = true) @Valid @RequestBody CreateTaskRequest createTaskRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2024-12-28T15:30:00Z\", \"description\" : \"Send email to ABC customer immediately informing them to process the pending payments within two days.\", \"id\" : 101, \"title\" : \"Send email to ABC customer.\", \"status\" : \"COMPLETED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tasks/search : Searches tasks by criteria.
     *
     * @param searchTasksRequest  (required)
     * @return Successfully searched tasks. (status code 200)
     *         or Bad Request - Invalid input data (status code 400)
     */
    @Operation(
        operationId = "searchTasks",
        summary = "Searches tasks by criteria.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully searched tasks.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchTasksResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid input data")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SearchTasksResponse> searchTasks(
        @Parameter(name = "SearchTasksRequest", description = "", required = true) @Valid @RequestBody SearchTasksRequest searchTasksRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"size\" : 6, \"last\" : true, \"numberOfElements\" : 5, \"totalPages\" : 5, \"page\" : 0, \"content\" : [ { \"dueDate\" : \"2024-12-28T15:30:00Z\", \"description\" : \"Send email to ABC customer immediately informing them to process the pending payments within two days.\", \"id\" : 101, \"title\" : \"Send email to ABC customer.\", \"status\" : \"COMPLETED\" }, { \"dueDate\" : \"2024-12-28T15:30:00Z\", \"description\" : \"Send email to ABC customer immediately informing them to process the pending payments within two days.\", \"id\" : 101, \"title\" : \"Send email to ABC customer.\", \"status\" : \"COMPLETED\" } ], \"first\" : true, \"totalElements\" : 1, \"empty\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
