openapi: 3.0.0
info:
  title: Encora Task Management API
  version: v1

paths:
  /signup:
    post:
      operationId: signup
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        '400':
          description: Bad Request - Invalid input data
        #          content:
        #            application/json:
        #              schema:
        #                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Email address already exists
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      operationId: login
      summary: Login for an existing user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Bad Request - Invalid input data
        #          content:
        #            application/json:
        #              schema:
        #                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Email address already exists
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/ErrorResponse'
  /tasks:
    post:
      operationId: createTask
      summary: Creates a new task.
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Successfully created a new task.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTaskResponse"
        '400':
          description: Bad Request - Invalid input data
  /tasks/search:
    post:
      operationId: searchTasks
      summary: Searches tasks by criteria.
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTasksRequest'
      responses:
        '200':
          description: Successfully searched tasks.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTasksResponse"
        '400':
          description: Bad Request - Invalid input data
components:
  schemas:
    Email:
      type: string
      format: email
      description: User's email address (must be unique)
      example: john.doe@example.com
    Password:
      type: string
      format: password
      pattern: "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,30}$"
      minLength: 8
      maxLength: 30
      description: User's password (at least 8 characters, one uppercase, one lowercase, one number, and one special character)
      example: "P@ssw0rd1"
    DisplayName:
      type: string
      maxLength: 50
      description: User's display name (alphabets and spaces only)
      example: John Doe
    FirstName:
      type: string
      maxLength: 50
      description: User's first name (alphabets only)
      example: John
    LastName:
      type: string
      maxLength: 50
      description: User's last name (alphabets only)
      example: Doe
    TaskId:
      type: integer
      description: Id of the task.
      example: 101
    TaskTitle:
      type: string
      description: Summary of the task.
      example: Send email to ABC customer.
    TaskDescription:
      type: string
      description: Details of the task.
      example: Send email to ABC customer immediately informing them to process the pending payments within two days.
    TaskDate:
      type: string
      format: date-time
      description: Date of the task.
      example: 2024-12-28T15:30:00Z
    TaskStatus:
      type: string
      description: Status of the task.
      example: COMPLETED
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - ON_HOLD
        - COMPLETED
        - CANCELED
    PageNumber:
      type: integer
      description: Page number (0-based)
      default: 0
    PageSize:
      type: integer
      description: Page size (number of records per page)
      default: 10
    Sort:
      type: array
      items:
        type: string
        example: "dueDate,desc"
    TotalElements:
      type: integer
      description: Total number of matching tasks
    TotalPages:
      type: integer
      description: Total number of pages
    LastPage:
      type: boolean
      description: True if this is the last page
    FirstPage:
      type: boolean
      description: True if this is the first page
    NumberOfElements:
      type: integer
      description: Number of elements on the current page
    EmptyPage:
      type: boolean
      description: True if the content list is empty
    SignupRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
        displayName:
          $ref: "#/components/schemas/DisplayName"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
      required:
        - email
        - password
        - displayName
        - firstName
        - lastName
    #    ErrorResponse:
    #      $ref: '#/components/schemas/ProblemDetail'
    LoginRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
      required:
        - email
        - password
    CreateTaskRequest:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/TaskTitle"
        description:
          $ref: "#/components/schemas/TaskDescription"
        dueDate:
          $ref: "#/components/schemas/TaskDate"
      required:
        - title
        - description
        - dueDate
    CreateTaskResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TaskId"
        title:
          $ref: "#/components/schemas/TaskTitle"
        description:
          $ref: "#/components/schemas/TaskDescription"
        dueDate:
          $ref: "#/components/schemas/TaskDate"
        status:
          $ref: "#/components/schemas/TaskStatus"
    SearchTasksRequest:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/TaskTitle"
        dueDateFrom:
          $ref: "#/components/schemas/TaskDate"
        dueDateTo:
          $ref: "#/components/schemas/TaskDate"
        status:
          type: array
          items:
            $ref: "#/components/schemas/TaskStatus"
          description: "Optional array of task statuses to filter by."
        page:
          $ref: "#/components/schemas/PageNumber"
        size:
          $ref: "#/components/schemas/PageSize"
        sort:
            $ref: "#/components/schemas/Sort"
    SearchTasksResponse:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/TaskId"
              title:
                $ref: "#/components/schemas/TaskTitle"
              description:
                $ref: "#/components/schemas/TaskDescription"
              dueDate:
                $ref: "#/components/schemas/TaskDate"
              status:
                $ref: "#/components/schemas/TaskStatus"
        page:
          $ref: "#/components/schemas/PageNumber"
        size:
          $ref: "#/components/schemas/PageSize"
        totalElements:
          $ref: "#/components/schemas/TotalElements"
        totalPages:
          $ref: "#/components/schemas/TotalPages"
        last:
          $ref: "#/components/schemas/LastPage"
        first:
          $ref: "#/components/schemas/FirstPage"
        numberOfElements:
          $ref: "#/components/schemas/NumberOfElements"
        empty:
          $ref: "#/components/schemas/EmptyPage"
    ProblemDetail2:
      title: Problem Details for HTTP APIs
      description: Definition of [RFC7807](https://tools.ietf.org/html/rfc7807) problem detail
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: number
        detail:
          type: string
        instance:
          type: string
      required:
        - title
        - detail
    SignupResponse:
      description: Sign up response
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
    LoginResponse:
      description: Login response
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
    UserDetails:
      description: User details.
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          example: john.doe@example.com
        displayName:
          type: string
          maxLength: 50
          description: User's display name (alphabets and spaces only)
          example: John Doe
        firstName:
          type: string
          maxLength: 50
          description: User's first name (alphabets only)
          example: John
        lastName:
          type: string
          maxLength: 50
          description: User's last name (alphabets only)
          example: Doe
externalDocs:
  description: "Find more info about error responses here"
  url: "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ProblemDetail.html"
